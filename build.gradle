def pomConfig = {
    organization {
        name 'Off-Beat Mind'
        url 'https://github.com/humanejava/humane'
    }
    scm {
        url 'https://github.com/humanejava/humane'
        connection 'scm:git:https://github.com/humanejava/humane.git'
        developerConnection 'scm:git:git@https://github.com/humanejava/humane.git'
    }
    licenses {
        license {
            name 'GNU Lesser General Public License'
            url 'https://www.gnu.org/licenses/lgpl-3.0.html'
            distribution 'repo'
            
        }
        license {
            name 'Apachee'
            url 'http://www.apache.org/licenses/LICENSE-2.0'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'humanejava'
            name 'Off-Beat Mind'
            organization 'Off-Beat Mind'
        }
    }
}

allprojects {
    repositories {
       mavenCentral()
    }
  
    ext {
        versionMajor = '0'
        versionMinor = '1'
        versionPatch = '3'
        String travisBuildNumber = System.getenv('TRAVIS_BUILD_NUMBER')
       
        if (travisBuildNumber != null) {
            snapshotBuild = false
            buildNumber = travisBuildNumber
            versionSuffix = ".${buildNumber}"
        } else {
            snapshotBuild = true
            buildNumber = null
            versionSuffix = '-SNAPSHOT'
        }
    }
  
    group = 'com.offbeatmind.humane'
    version = "${versionMajor}.${versionMinor}.${versionPatch}${versionSuffix}" 
  
    apply plugin: 'maven-publish'
  
    plugins.withType(JavaPlugin) {
        task sourcesJar(type: Jar) {
            from sourceSets.main.allJava
            archiveClassifier = 'sources'
        }
        
        task javadocJar(type: Jar) {
            from javadoc
            archiveClassifier = 'javadoc'
        }
        
        jar {
            into("META-INF/maven/$project.group/$project.name") {
                from { generatePomFileForMavenPublication }
                rename ".*", "pom.xml"
            }
        }
        
        publishing {
            repositories {
                maven {
                    credentials {
                        username System.getenv('NEXUS_USER')
                        password System.getenv('NEXUS_PASSWORD')
                    }
                    if (project.version.endsWith('-SNAPSHOT')) {
                        url 'https://oss.sonatype.org/content/repositories/snapshots'
                    } else {
                        url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                    }
                }
            }
            publications {
                maven(MavenPublication) {
                    artifactId = 'humane-' + project.path.substring(1).replace(':', '-');
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                    pom.withXml {
//                        def dependenciesNode = asNode().getAt("dependencies")[0]
//                        if (dependenciesNode == null) {
//                            dependenciesNode = asNode().appendNode('dependencies')
//                        }
//                        
//                        configurations.implementation.allDependencies.each {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            dependencyNode.appendNode('version', it.version)
//                            dependencyNode.appendNode('scope', 'compile')
//                        }
//                        
//                        configurations.runtimeOnly.allDependencies.each {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            dependencyNode.appendNode('version', it.version)
//                            dependencyNode.appendNode('scope', 'runtime')
//                        }
//                          
                        asNode().children().last() + pomConfig 
                    }
                }
            }
        }
    }
}